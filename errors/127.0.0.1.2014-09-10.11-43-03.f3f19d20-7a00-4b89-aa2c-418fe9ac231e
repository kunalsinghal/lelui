(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'conjunction' is not defined"
p3
sS'layer'
p4
S'/home/btech/cs1120231/Desktop/web2py/applications/lelui/controllers/default.py'
p5
sS'code'
p6
S'import random\nimport json\nimport os\n\nmoduledir = os.path.dirname(os.path.abspath(\'__file__\'))\n\ndef index():\n    return dict(message=T(\'Welcome to our Crowd Sourcing Platform!\'))\n\n#@auth.requires_login()\ndef get_sentence():\n    return "bla"\n\n#@auth.requires_login()\ndef tutorial():\n    return dict()\n\n\ndef getAnnotation(data):\n    session.data = data\n    ret = "<p>"\n    words = data[\'sentence\']\n    separators = data[\'conjunction\']\n    high = data[\'highlighted\']\n    j = 0\n    k = 0\n    for i in xrange(len(words)):\n        if j <> len(separators) and i == separators[j]:\n            j += 1\n            ret += "<span class=\'word red\' id=\'" + str(i) + "\'>" + words[i] + "&nbsp;</span>"\n        elif k <> len(high) and i == high[k]:\n            k += 1\n            ret += "<span class=\'word high\' id=\'" + str(i) + "\'>" + words[i] + "&nbsp;</span>"\n        else:\n            ret += "<span class=\'word\' id=\'" + str(i) + "\'>" + words[i] + "&nbsp;</span>"\n    ret += "</p>"\n    return XML(ret)\n\n\n@auth.requires_login()\ndef contribute():\n    x = db(db.once).select()\n    y = db(db.approved).select()\n    instr = XML("<h4> Yay! We are done.")\n    btn = XML("")\n    sn = XML("")\n    if len(x) > 0:\n        instr = XML("<h4> Annotate the following sentence for list elements </h4>")\n        btn = XML("<button type=\'submit\' class=\'btn btn-primary\' id=\'submit\'>Submit</button>")\n        session.index = random.randint(0, len(x)-1)\n        print "rand index", session.index\n        sn = getAnnotation(x[session.index])\n    return dict(sentence=sn, once=len(x), approved=len(y), instruction=instr, buttons=btn)\n\n\ndef recordAnnotation():\n    lis = map(int, filter(None, request.vars.lis.split(\',\')))\n    data = session.data\n    id = data[\'id\']\n    if data[\'highlighted\'] == lis:\n        db.approved.insert(sentence=data[\'sentence\'], conjunction=data[\'conjunction\'], highlighted=data[\'highlighted\'], person1=data[\'person\'], person2=auth.user)\n    else:\n        db.once.insert(sentence=data[\'sentence\'], conjunction=data[\'conjunction\'], highlighted=lis, person=auth.user)        \n    db(db.once.id == id).delete()\n    ret = contribute()\n    ret[\'sentence\'] = str(ret[\'sentence\'])\n    ret[\'instruction\'] = str(ret[\'instruction\'])\n    ret[\'buttons\'] = str(ret[\'buttons\'])\n    return json.dumps(ret)\n\ndef reset():\n    db(db.once).delete()\n    db(db.approved).delete()\n    db.once.insert(sentence=["this", "is", "shit", "and", "smack1"], conjunction=[3], highlighted=[2, 4])\n    db.once.insert(sentence=["this", "is", "shit", "and", "smack2"], conjunction=[3], highlighted=[2, 4])\n    db.once.insert(sentence=["this", "is", "shit", "and", "smack3"], conjunction=[3], highlighted=[2, 4])\n    db.once.insert(sentence=["this", "is", "shit", "and", "smack4"], conjunction=[3], highlighted=[2, 4])\n    \n    f = open(os.path.join(moduledir, \'applications/lelui/controllers/sentences\'), \'r\')\n    \n    num = int(f.readline().strip())\n    for _ in xrange(num):\n        n = int(f.readline().strip())\n        sentence = [f.readline().strip() for i in xrange(n)]\n        m = int(f.readline().strip())\n        for conj in xrange(m):\n            conjuction=[int(f.readline().strip())]\n            conjuncts=int(f.readline().strip())\n            highlighted = []\n            for x in xrange(conjuncts):\n                l, r = map(int, f.readline().split())\n                for pos in xrange(l, r+1):\n                    highlighted.append(pos)\n            db.once.insert(sentence=sentence, conjunction=conjunction, highlighted=highlighted)\n    f.close()\n    return dict()\n\ndef lis():\n    x = db(db.approved).select()\n\n    print "=================================================================="\n    print x\n    print "=================================================================="\n\n    return dict()\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(reset)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/btech/cs1120231/Desktop/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/btech/cs1120231/Desktop/web2py/applications/lelui/controllers/default.py", line 159, in <module>\n  File "/home/btech/cs1120231/Desktop/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/btech/cs1120231/Desktop/web2py/applications/lelui/controllers/default.py", line 94, in reset\n    db.once.insert(sentence=sentence, conjunction=conjunction, highlighted=highlighted)\nNameError: global name \'conjunction\' is not defined\n'
p11
s.